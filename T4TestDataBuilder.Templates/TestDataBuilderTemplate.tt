<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="System.Data.Entity.Design.dll" #>
<#@ Assembly Name="$(SolutionDir)\T4TestDataBuilder.Entities\bin\debug\T4TestDataBuilder.Entities.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Globalization" #> 
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="T4TestDataBuilder.Entities" #>
<#@ import namespace="T4TestDataBuilder.Entities.Scenario1" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace TestDataBuilder {

<#
  
   IEnumerable<TypeInformation> types = GetTypes();

   foreach(TypeInformation type in types) {
#>
  
  public partial class <#=type.Name#> {
    public <#=type.Name#>() {
		<#
			foreach(PropertyInformation propInfo in type.Properties) {
			#>
				<#= propInfo.FieldName#> = DefaultValueFactory.GetValue(() => <#= propInfo.FieldName #>);
			<#
			}
			#>
	}
  
	<#
	foreach(PropertyInformation propInfo in type.Properties) {
	#>
		private <#=propInfo.Type#> <#=propInfo.FieldName#>;
	<#
	} // end foreach property
	#>

	<#
	foreach(PropertyInformation propInfo in type.Properties) {
	#>
		public <#=type.Name#> With<#=propInfo.Name#>(<#=propInfo.Type#> <#=ToLowerStart(propInfo.Name)#>) {
			<#=propInfo.FieldName#> = <#=ToLowerStart(propInfo.Name)#>;
			return this;
		}
	<#
	} // end With-method
	#>

	public <#=type.OriginalName#> Build() {
		return new <#=type.OriginalName#> {
			<#
				foreach(PropertyInformation propInfo in type.Properties) {
			#>
				<# if (propInfo.GetPropertyType() == PropertyType.GenericList && propInfo.OriginalProperty.PropertyType.GetGenericTypeDefinition() != typeof(IEnumerable<>)) {#>				
					<#=propInfo.Name#> = new <#=GetTypeName(propInfo.OriginalProperty.PropertyType)#>(<#=propInfo.FieldName#><#= (propInfo.GetPropertyType() == PropertyType.GenericList) ? ".ToList<" + propInfo.OriginalProperty.PropertyType.GetGenericArguments().First() + ">()" : ""#>),
				<# } else { #>
					<#=propInfo.Name#> = <#=propInfo.FieldName#><#= (propInfo.GetPropertyType() == PropertyType.GenericList) ? ".ToList<" + propInfo.OriginalProperty.PropertyType.GetGenericArguments().First() + ">()" : ""#>,
				<# } #>
			<#
				}
			#>
		};
	}

	public static implicit operator <#=type.OriginalName#>(<#=type.Name#> builder) {
		return builder.Build();
	}


  } // end class

 <#
 } // end foreach type
 #>

 public class BuilderList<T> : List<T>
    {
        public IEnumerable<Y> ToList<Y>() where Y : class
        {
            return this.Select(item => item as Y);
        }
    }
	
	public class DefaultValueFactory
    {
         public static T GetValue<T>(Expression<Func<T>> expr)
         {
             if (expr.Body.Type == typeof(string))
             {
                 return (T)(object)(expr.Body as MemberExpression).Member.Name;

             }
             return default(T);
         }
    }
} // end namespace

<#+
  public class PropertyInformation {
	public PropertyInformation(PropertyInfo info) {
		OriginalProperty = info;	
	}
	public string FieldName {
		get {
			return string.Format("_{0}",ToLowerStart(OriginalProperty.Name));
		}
	}
	public string Name {
		get {
			return OriginalProperty.Name;
		}
	}
	

	public string Type {
		get {
			switch (GetPropertyType()) {
				case PropertyType.ValueOrString:
					return GetTypeName(OriginalProperty.PropertyType);
				case PropertyType.Array:
					return GetTypeName(OriginalProperty.PropertyType);
				case PropertyType.GenericList:
					return string.Format("BuilderList<{0}Builder>", OriginalProperty.PropertyType.GetGenericArguments().First().Name);
				case PropertyType.ReferenceType:
					return string.Format("{0}Builder",OriginalProperty.PropertyType.Name);
				default:
					throw new NotImplementedException();
			}
		}
	
	}
	public PropertyInfo OriginalProperty {get; private set;}
	
	public PropertyType GetPropertyType() {
		if (OriginalProperty.PropertyType.IsValueType || OriginalProperty.PropertyType == typeof(String))
			return PropertyType.ValueOrString;
		
		if (OriginalProperty.PropertyType.IsArray)
			return PropertyType.Array;
		
		if (OriginalProperty.PropertyType.GetInterfaces().Where(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEnumerable<>)).Any() || (OriginalProperty.PropertyType.IsGenericType && OriginalProperty.PropertyType.GetGenericTypeDefinition() == typeof(IEnumerable<>)))
			return PropertyType.GenericList;
		
		return PropertyType.ReferenceType;
	}
  }

  public enum PropertyType {
	ValueOrString,
	Array,
	GenericList,
	ReferenceType
  }

  public class TypeInformation {
	public TypeInformation(Type original) {
		OriginalType = original;
	}
	public string Name {
		get {
			return OriginalType.Name + "Builder";
		}
	}
	public string OriginalName {
		get {
			return GetTypeName(OriginalType);
		}
	}

	public Type OriginalType {get;private set;}
	public IEnumerable<PropertyInformation> Properties {
		get {
			return from prop in OriginalType.GetProperties()
				where prop.CanWrite
				select new PropertyInformation(prop);
		}
	}
  }

  
	string Singularize(string target)
	{
		PluralizationService pls = PluralizationService.CreateService(new CultureInfo("en"));

		if (pls.IsPlural(target))
			target = pls.Singularize(target);

		return target;
	}
	
	public static string GetTypeName(Type type)
		{
			CodeTypeReferenceExpression codeType = new CodeTypeReferenceExpression(type);
			CodeDomProvider csProvider = Microsoft.CSharp.CSharpCodeProvider.CreateProvider("C#");
			StringWriter writer = new StringWriter();
			csProvider.GenerateCodeFromExpression(codeType, writer, new CodeGeneratorOptions());
			return writer.ToString();
		}

string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{		
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}
static string ToLowerStart(string name) {
	return string.Format("{0}{1}",name.Substring(0,1).ToLower(),name.Substring(1));
}

IEnumerable<TypeInformation> GetTypes() {
		// Get the types from the input files
		//Assembly common = Assembly.LoadFile(GetCurrentDirectory()+@"\Cerdo.CIP.Common.dll");
		//Assembly assembly = Assembly.LoadFile(GetCurrentDirectory()+@"\Cerdo.CNA.MPScraper.Service.Entities.dll");
		//Assembly assembly = Assembly.LoadFile(GetCurrentDirectory()+@"\T4TestDataBuilder.Tests.dll");
		var types = (from type in typeof(Car).Assembly.GetTypes()
				select new TypeInformation (type)).ToList();

		//types.AddRange((from type in common.GetTypes() where type.Name == "RequestHeader" || type.Name == "ResponseHeader" select new TypeInformation(type)));

		return types;
}
#>